import java.util.*;import java.io.*; public class Main {        static class Pair {        long F, S;        Pair(long f, long s) {            this.F = f;            this.S = s;        }    }     static boolean cmp(Pair a, Pair b) {        if (a.S == b.S) {            return (double)a.F / a.S > (double)b.F / b.S;        } else {            return a.S < b.S;        }    }     public static void solve(Scanner sc) {        int n = sc.nextInt();        long k = sc.nextLong();                long[] a = new long[n];        long[] b = new long[n];                for (int i = 0; i < n; i++) a[i] = sc.nextLong();        for (int i = 0; i < n; i++) b[i] = sc.nextLong();         List<Pair> vec = new ArrayList<>();        List<Pair> bec = new ArrayList<>();                for (int i = 0; i < n; i++) {            vec.add(new Pair(a[i], b[i]));        }         // Sorting with custom comparator        vec.sort((p1, p2) -> {            if (p1.S == p2.S) {                double r1 = (double)p1.F / p1.S;                double r2 = (double)p2.F / p2.S;                return Double.compare(r2, r1); // descending order            } else {                return Long.compare(p1.S, p2.S);            }        });         if (vec.get(0).S >= k || n == 1) {            System.out.println(k * n);        } else {            for (Pair pr : vec) {                if (pr.S <= k) {                    bec.add(pr);                }            }             long ans = k;            long p = n - 1;             for (Pair pr : bec) {                if (p >= pr.F) {                    long s = pr.F * pr.S;                    ans += s;                    p -= pr.F;                    if (p == 0) break;                } else {                    long s = p * pr.S;                    ans += s;                    System.out.println(ans);                    return;                }            }             if (p != 0) {                ans += p * k;            }            System.out.println(ans);        }    }     public static void main(String[] args) throws Exception {        Scanner sc = new Scanner(System.in);        int q = sc.nextInt();        while (q-- > 0) {            solve(sc);        }        sc.close();    }}