import java.util.*;import java.io.*;Â public class Solution {    public static void main(String[] args) throws IOException {        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));                long t = Long.parseLong(br.readLine());                while (t-- > 0) {            long n = Long.parseLong(br.readLine());                        HashMap<Long, Long> a = new HashMap<>();            HashMap<Long, Long> b = new HashMap<>();                        // Process first array            String[] firstArray = br.readLine().split(" ");            long prev = -1, cur = 0;                        for (int p = 0; p < n; p++) {                long x = Long.parseLong(firstArray[p]);                if (x != prev) {                    if (prev > 0 && (!a.containsKey(prev) || a.get(prev) < cur)) {                        a.put(prev, cur);                    }                    cur = 0;                }                cur++;                prev = x;            }            if (!a.containsKey(prev) || a.get(prev) < cur) {                a.put(prev, cur);            }                        // Process second array            String[] secondArray = br.readLine().split(" ");            prev = -1;            cur = 0;                        for (int p = 0; p < n; p++) {                long x = Long.parseLong(secondArray[p]);                if (x != prev) {                    if (prev > 0 && (!b.containsKey(prev) || b.get(prev) < cur)) {                        b.put(prev, cur);                    }                    cur = 0;                }                cur++;                prev = x;            }            if (!b.containsKey(prev) || b.get(prev) < cur) {                b.put(prev, cur);            }                        // Find maximum sum            long mx = 0;                        // Check all keys in map a            for (Map.Entry<Long, Long> entry : a.entrySet()) {                long key = entry.getKey();                long val = entry.getValue();                if (key > 0 && b.containsKey(key)) {                    val += b.get(key);                }                mx = Math.max(mx, val);            }                        // Check all keys in map b            for (Map.Entry<Long, Long> entry : b.entrySet()) {                long key = entry.getKey();                long val = entry.getValue();                if (key > 0 && a.containsKey(key)) {                    val += a.get(key);                }                mx = Math.max(mx, val);            }                        System.out.println(mx);        }    }}